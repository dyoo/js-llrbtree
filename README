Functional left-leaning red black trees

Danny Yoo (dyoo@hashcollision.org)


A JavaScript implementation ported from: http://www.mew.org/~kazu/proj/red-black-tree/



----------------------------------------------------------------------


I'm taking the code from Kazu Yamamoto's implementation:

    https://github.com/kazu-yamamoto/llrbtree

and porting what I need from it to JavaScript.  I don't think I need
the height or removeMax/removeMin implementations, so I haven't yet
ported that code over.


----------------------------------------------------------------------

Binds LLRBTree as a namespace with the following names:


EMPTY : llrbtree

    The empty tree.



insert : llrbtree X (X X -> Integer) -> llrbtree

    Insert an element into the llrbtree, according to the provided comparator.


remove: llrbtree X (X X -> Integer) -> llrbtree

    Remove an element from the llrbtree, according to the provided comparator.

find: llrbtree X (X X -> Integer) -> (U X undefined)

    Look for an element in the llrbtree.  Returns undefined if we can't find it.

contains: llrbtree X (X X -> Integer) -> Boolean

    Returns true if the element's in the llrbtree, false otherwise.



The operations are functional, and should allow me to build a nice
functional map abstraction out of the pieces.  I have a sample
implementation of such an associative array in the LLRBTree.makeMap
function:

makeMap: (Key Key -> number) -> Map

    Returns a Map object, using the key comparator to order the
    nodes in the internal tree.

The Map has the following methods:

    put: Key Value -> Map
    contains: Key -> Boolean
    get: Key (-> X) -> (U Key X)
    remove: Key -> Map
    isEmpty: -> Boolean

all which do the standard associative array operations, but in a
functional way.  It also has a few functions to navigate the tree
structure:

    left: -> Map
    right: -> Map
    color: -> (U "R" "B")
    key: -> Key
    val: -> Value